require 'als'
require 'nokogiri'

def get_xml_doc(path)
  File.open(path) { |f| Nokogiri.XML(f) }
end

RSpec.describe 'ALS parser' do
  context 'when parsing an als file with a drum rack' do
    before(:each) do
      @als = ALS::Set.from_xml_document(get_xml_doc('./spec/als-samples/drum-rack.xml'))
    end


    it 'has a drum rack' do
      rack = @als.midi_tracks[0].drum_rack
      sample_mapping = rack.sample_mapping
      expect(sample_mapping['C1']).to eq 'E-Kick 2.aif'
      expect(sample_mapping['D1']).to eq 'Snare 808 Airy Reverb.aif'
    end
  end

  context 'when parsing an als file with a simpler' do
    before(:each) do
      @als = ALS::Set.load('./spec/als-samples/simpler.als')
    end


    it 'has a simpler' do
      simpler = @als.midi_tracks[0].simpler
      expect(simpler.sample_file).to eq 'Spectral 16.aif'
      expect(simpler.root_key).to eq 'G#3'
    end
  end

  context 'when parsing an als file' do
    before(:each) do
      @als = ALS::Set.from_xml_document(get_xml_doc('./spec/als-samples/test-set'))
    end

    it 'gets the als data' do
      expect(@als.midi_tracks.length).to eq 2
      expect(@als.tempo).to eq 120
    end

    it 'gets the midi clips' do
      track = @als.midi_tracks[0]
      expect(track.name).to eq '1-Acoustic Almost Bass'
      expect(track.clips.length).to eq 1
    end

    it 'gets the notes in a midi clip' do
      clip = @als.midi_tracks[0].clips[0]
      notes = clip.notes
      expect(notes.length).to eq 8
      expect(clip.name).to eq 'Clip clipety clip clip'
    end

    it 'parses a note correctly' do
      notes = @als.midi_tracks[0].clips[0].notes
      note = notes[0]
      expect(note.start_time).to eq 0
      expect(note.midi_note).to eq 64
      expect(note.on_velocity).to eq 127
      expect(note.off_velocity).to eq 127
      expect(note.duration).to eq 1
    end

  end

=begin
  context 'when parsing an als file with audio tracks' do
  before(:each) do
    @als = ALS::Set.from_xml_document(get_xml_doc('./spec/als-samples/folktronica.xml'))
  end

  it 'gets the als data' do
    expect(@als.audio_tracks.length).to eq 8
    expect(@als.tempo).to eq 125
  end

  it 'parses the audio clips' do
    track = @als.audio_tracks[0]
    expect(track.name).to eq 'Drums 1'
    expect(track.clips.length).to eq 6
    clip = track.clips[0]
    expect(clip.name).to eq 'Shiny Kick:Drums:Kick:16-25:Loop:Bar:None'
    expect(clip.sample_volume).to eq 0.5956364274
    expect(clip.sample_ref.file_path).to eq 'samples/Imported/125_FilteredBeat.wav'
    expect(clip.loop.start_time).to eq 0
    expect(clip.loop.end_time).to eq 16.0
    expect(clip.time_sig.numerator).to eq 4
    expect(clip.time_sig.denominator).to eq 4
  end
  end

  context 'when parsing an als with multiple midi clips' do
  before(:each) do
    @als = ALS::Set.from_xml_document(get_xml_doc('./spec/als-samples/2-clips'))
  end
  it 'gets the midi tracks' do
    bass_track = @als.midi_tracks[0]
    expect(bass_track.name).to eq '1-Muted Bass2 Wow'
    expect(bass_track.clips.length).to eq 1

    saw_slow_track = @als.midi_tracks[1]
    expect(saw_slow_track.name).to eq '2-Saw8 Slow Sweep Bass'
    expect(saw_slow_track.clips.length).to eq 1
  end

  it 'parses quiet notes correctly' do
    notes = @als.midi_tracks[1].clips[0].notes
    note = notes[1]
    expect(note.midi_note).to eq 69
    expect(note.on_velocity).to eq 15.8857174
    expect(note.off_velocity).to eq 64
    expect(note.duration).to eq 1
  end

  it 'parses long notes correctly' do
    notes = @als.midi_tracks[1].clips[0].notes
    note = notes[2]
    expect(note.midi_note).to eq 72
    expect(note.start_time).to eq 2
    expect(note.on_velocity).to eq 100
    expect(note.off_velocity).to eq 64
    expect(note.duration).to eq 2
  end
  end

  context 'when parsing an als with a polyphonic midi clip' do
  before(:each) do
    @als = ALS::Set.from_xml_document(get_xml_doc('./spec/als-samples/polyphonic'))
  end
  it 'parses chords' do
    notes = @als.midi_tracks[0].clips[0].notes
    expect(notes.length).to eq 6

    chord1 = notes[0, 3]
    expect(chord1.all? {|note| note.start_time == 0}).to eq true

    chord2 = notes[3, 6]
    expect(chord2.all? {|note| note.start_time == 2}).to eq true
  end
  end

  context 'when loading a real groovebox als session' do
  before(:each) do
    @als = ALS::Set.load('./spec/als-samples/s3-house-chords-2s.als')
  end

  it 'gets all the tracks' do
    expect(@als.midi_tracks.length).to eq 20
  end

  it 'gets the vst program data' do
    expected = '66506646010000000800000072506646010000003373474202000000763208000000507265736574' +
    '2031477EA5847BCA40DEA9CBFA545FCD9F960100000000000000010000002A000000000000860A15' +
    '32C000000040850AE53F0000000000003440000000000000F03F8232C99C668B7140000000000000' +
    '000000000080274D0A40000000000000004000000000000000000000000000000000000000000000' +
    'F03F000000000000F03F000000000000F03F00000060C488C13F000000000000F03FBAAF86FBC2D5' +
    '804000000020468CE83F000000A0D9B2154000000080E0C01140000000000000F03F000000000000' +
    'F03F00000000000000005C6D4B8055EEB13F6B13F711BF0EEA3F9820BF1248A3A33F7B14AE47E17A' +
    '843F71CA3D02874ED03F1289D665DA8DDB3F3CA01E3B746CD73F00000000000018405EA2D1F48B0B' +
    'E83F000000000000F03F000000000000E83F000000000000F03F000000000000E03F88BF6FEA1327' +
    'E03F000000407EFCE83F00000000152AD43F000000000000000000000080F5EAE53F000000000000' +
    'F03F0000000000000000725066460100000033734742020000007632080000005072657365742032' +
    'D6F0C6CEB30C4AC48B3BB560E45BDC730100000000000000010000002A00000000000000000028C0' +
    '000000000000E03F000000000000F83F000000000000000001000000000000400000000000000000' +
    '000000000000000000000000000000000000000000000000000000000000F03F0000000000000040' +
    '00000000000000000000000000000040B81E85EB51B89E3F000000000000000002000000C087D340' +
    '00000000000000000000000000000000000000000000000000000000000000000000000000000000' +
    '00000000000000007C14AE47E17A743FFDFFFFFFFFFFDF3F333333333333E33F0000000000000840' +
    '000000000000F03FFFFFFFFFFFFFEF3F313333333333D33FFDFFFFFFFFFF0F40000000000000F03F' +
    '0000000000000000000000000000E83F0000000000000000000000000000E03F000000000000F03F' +
    '00000000000000000000000000000000000000000000000000000000000000000000000000000000' +
    '0000000000000000725066460100000033734742020000007632080000005072657365742033151D' +
    '93B204E34EAAB17AE8F7671E655E0100000000000000010000002A00000000000000000028C00000' +
    '00000000E03F000000000000F83F0000000000000000010000000000004000000000000000000000' +
    '00000000000000000000000000000000000000000000000000000000F03F00000000000000400000' +
    '0000000000000000000000000040B81E85EB51B89E3F000000000000000002000000C087D3400000' +
    '00000000000000000000000000000000000000000000000000000000000000000000000000000000' +
    '0000000000007C14AE47E17A743FFDFFFFFFFFFFDF3F333333333333E33F00000000000008400000' +
    '00000000F03FFFFFFFFFFFFFEF3F313333333333D33FFDFFFFFFFFFF0F40000000000000F03F0000' +
    '000000000000000000000000E83F0000000000000000000000000000E03F000000000000F03F0000' +
    '00000000000000000000000000000000000000000000000000000000000000000000000000000000' +
    '0000000000007250664601000000337347420200000076320800000050726573657420341F045F48' +
    '5B3F40ED905F7FBDE57F13F50100000000000000010000002A00000000000000000028C000000000' +
    '0000E03F000000000000F83F00000000000000000100000000000040000000000000000000000000' +
    '0000000000000000000000000000000000000000000000000000F03F000000000000004000000000' +
    '000000000000000000000040B81E85EB51B89E3F000000000000000002000000C087D34000000000' +
    '00000000000000000000000000000000000000000000000000000000000000000000000000000000' +
    '000000007C14AE47E17A743FFDFFFFFFFFFFDF3F333333333333E33F000000000000084000000000' +
    '0000F03FFFFFFFFFFFFFEF3F313333333333D33FFDFFFFFFFFFF0F40000000000000F03F00000000' +
    '00000000000000000000E83F0000000000000000000000000000E03F000000000000F03F00000000' +
    '00000000000000000000000000000000000000000000000000000000000000000000000000000000' +
    '0000000072506646010000003373474202000000763208000000507265736574203596FE8F1BF8C2' +
    '4C3ABBFF62C044B7A24A0100000000000000010000002A00000000000000000028C0000000000000' +
    'E03F000000000000F83F000000000000000001000000000000400000000000000000000000000000' +
    '000000000000000000000000000000000000000000000000F03F0000000000000040000000000000' +
    '00000000000000000040B81E85EB51B89E3F000000000000000002000000C087D340000000000000' +
    '00000000000000000000000000000000000000000000000000000000000000000000000000000000' +
    '00007C14AE47E17A743FFDFFFFFFFFFFDF3F333333333333E33F0000000000000840000000000000' +
    'F03FFFFFFFFFFFFFEF3F313333333333D33FFDFFFFFFFFFF0F40000000000000F03F000000000000' +
    '0000000000000000E83F0000000000000000000000000000E03F000000000000F03F000000000000' +
    '00000000000000000000000000000000000000000000000000000000000000000000000000000000' +
    '00007250664601000000337347420200000076320800000050726573657420365CD95171D7EC4A71' +
    'A6F9BE1059FD6D370100000000000000010000002A00000000000000000028C0000000000000E03F' +
    '000000000000F83F0000000000000000010000000000004000000000000000000000000000000000' +
    '00000000000000000000000000000000000000000000F03F00000000000000400000000000000000' +
    '0000000000000040B81E85EB51B89E3F000000000000000002000000C087D3400000000000000000' +
    '00000000000000000000000000000000000000000000000000000000000000000000000000000000' +
    '7C14AE47E17A743FFDFFFFFFFFFFDF3F333333333333E33F0000000000000840000000000000F03F' +
    'FFFFFFFFFFFFEF3F313333333333D33FFDFFFFFFFFFF0F40000000000000F03F0000000000000000' +
    '000000000000E83F0000000000000000000000000000E03F000000000000F03F0000000000000000' +
    '00000000000000000000000000000000000000000000000000000000000000000000000000000000' +
    '7250664601000000337347420200000076320800000050726573657420373AD2FA1D85C6491F8FBA' +
    'A2BE2E055A510100000000000000010000002A00000000000000000028C0000000000000E03F0000' +
    '00000000F83F00000000000000000100000000000040000000000000000000000000000000000000' +
    '0000000000000000000000000000000000000000F03F000000000000004000000000000000000000' +
    '000000000040B81E85EB51B89E3F000000000000000002000000C087D34000000000000000000000' +
    '00000000000000000000000000000000000000000000000000000000000000000000000000007C14' +
    'AE47E17A743FFDFFFFFFFFFFDF3F333333333333E33F0000000000000840000000000000F03FFFFF' +
    'FFFFFFFFEF3F313333333333D33FFDFFFFFFFFFF0F40000000000000F03F00000000000000000000' +
    '00000000E83F0000000000000000000000000000E03F000000000000F03F00000000000000000000' +
    '00000000000000000000000000000000000000000000000000000000000000000000000000007250' +
    '6646010000003373474202000000763208000000507265736574203834650A63AFED44F48203570A' +
    '6E56F8A50100000000000000010000002A00000000000000000028C0000000000000E03F00000000' +
    '0000F83F000000000000000001000000000000400000000000000000000000000000000000000000' +
    '000000000000000000000000000000000000F03F0000000000000040000000000000000000000000' +
    '00000040B81E85EB51B89E3F000000000000000002000000C087D340000000000000000000000000' +
    '0000000000000000000000000000000000000000000000000000000000000000000000007C14AE47' +
    'E17A743FFDFFFFFFFFFFDF3F333333333333E33F0000000000000840000000000000F03FFFFFFFFF' +
    'FFFFEF3F313333333333D33FFDFFFFFFFFFF0F40000000000000F03F000000000000000000000000' +
    '0000E83F0000000000000000000000000000E03F000000000000F03F000000000000000000000000' +
    '000000000000000000000000000000000000000000000000000000000000000000000000'

    track = @als.midi_tracks[0]
    expect(track.vst_plugin_info.preset_buffer).to eq expected
    expect(track.vst_plugin_info.program_number).to eq 0
  end
  end
end
=end
end

=begin
RSpec.describe 'Clip parser' do
  context 'when parsing a real world clip' do
  before(:each) do
    doc = File.open('./spec/als-samples/real-world-clip.xml') {|file|
    Nokogiri::XML(file)
    }
    @clip = ALS::MidiClip.parse(doc.xpath('./MidiClip').first)
  end

  it 'parses the clip properly' do
    expect(@clip.notes.length).to eq 6
  end
  end
end
=end
